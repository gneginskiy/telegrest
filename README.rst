Telegrest
========
.. epigraph::

  ⭐️ Thanks **everyone** who has starred the project, it means a lot!

**Telegrest** is a straightforward application that lets you send Telegram notifications via REST API endpoints. It uses the Telethon library and comes packaged as a Docker image for easy deployment. Notably, it avoids the Telegram Bot API, opting for a regular client instead.

What is this?
-------------
Telegram stands out as a widely-used messaging application. 
This tool simplifies the process of creating programs that can send Telegram notifications through REST.


Installing
----------
0. Install docker ( https://docs.docker.com/engine/install/ )
1. Run the application from terminal/command line in interactive mode: 

.. code-block:: sh
  
  docker run -it gneginskiy/telegrest:1.0

2. Enter your api_id (e.g. 23491234). You can get it from https://my.telegram.org/apps
3. Enter your api_hash (e.g. 810a8615724f34f40676c2cab8d5a609). You can get it from https://my.telegram.org/apps
4. Enter you phone using international format (e.g. +79660354444)
5. Then, telegram will send you a confirmation code. Enter your confirmation code as well.
6. As an additional measure, telegram client can ask you for a password. Enter it as well.
7. After you provided all the required information, the application will print **auth string**. Save it, you'll need it soon.
8. Run the application from terminal/command line, providing the **auth string** you got during the previous step:

.. code-block:: sh

  docker run \
  -p 5001:5001 \
  -e TELEGREST_AUTH=%YOUR_AUTH_STRING_HERE% \
  gneginskiy/telegrest:1.0

9. Do not share your auth string with anybody.

Doing stuff
-----------
For now, there are 2 enpoints, one for sending text messages, and another for sending files. 

1. Sending messages

**POST** ``http://localhost:5001/send_message``

.. code-block:: json

  {
      "username":"+79660354444",
      "message":"Hey!"
  }

For "username" field you can use the phone number as well as the actual telegram nickname (e.g. @addaxbx):

.. code-block:: json

  {
      "username":"addaxbx",
      "message":"Hey!"
  }


2. sending files: 

**POST** ``http://localhost:5001/send_file``

.. code-block:: json

  {
  "username":"+79660354444",
  "extension":"png",
  "data":""
  }
